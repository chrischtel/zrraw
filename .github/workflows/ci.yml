name: Continuous Integration

# This workflow runs on pushes to 'main' and on Pull Requests targeting 'main'.
# It also runs on prerelease branches to ensure quality.
on:
  push:
    branches: [ "main", "develop", "beta", "release/**", "rc/**" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  test-suite:
    name: Test on ${{ matrix.os }}
    # This matrix will run the same set of steps on three different operating systems.
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Get the source code from your repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install the Zig compiler on the build machine.
      - name: Setup Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.14.1 # Or your preferred Zig version

      # Step 3: Install the Rust toolchain.
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3.5: Test building Zig library directly first
      - name: Test Zig library build
        run: |
          echo "=== Testing Zig library build ==="
          zig build -Doptimize=ReleaseFast
          ls -la zig-out/lib/
          ls -la zig-out/include/

      # Step 4: Run the Rust tests.
      # This is the key step. We use the 'compile-from-source' feature to force
      # the build.rs script to compile the local Zig code.
      # We also need to copy the compiled DLL to the correct location for the tests to find it.
      - name: Build and Run Rust Tests
        shell: bash
        working-directory: bindings/rust
        run: |
          set -e  # Exit on any error
          
          echo "=== Building Rust crates with Zig library compilation ==="
          # Build the Rust crates and the Zig library via the build.rs script.
          # This will create the test executable and the shared library.
          cargo build --workspace --features "zrraw-sys/compile-from-source" --tests

          echo "=== Checking for compiled library ==="
          ls -la ../../zig-out/lib/ || echo "zig-out/lib directory not found"
          
          echo "=== Looking for zrraw test executables ==="
          find target/debug/deps -name "zrraw*" | head -5
          
          # --- Find the compiled library and the test executable ---
          # The exact paths can vary slightly, so we use wildcards.
          # We need to copy the library to where BOTH zrraw-sys and zrraw test executables are
          
          # On Windows, the library is a .dll
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Look for any dll file (versioned or not)
            LIB_PATH=$(find ../../zig-out/lib -name "zrraw*.dll" | head -n 1)
            if [[ -z "$LIB_PATH" ]]; then
              echo "Error: Could not find zrraw dll in ../../zig-out/lib/"
              ls -la ../../zig-out/lib/
              exit 1
            fi
            # Find all test executables and copy the DLL to their directories
            find target/debug/deps -name "zrraw*-*.exe" | while read test_exe; do
              TEST_EXE_DIR=$(dirname "$test_exe")
              echo "Copying $LIB_PATH to $TEST_EXE_DIR/ as zrraw.dll"
              cp "$LIB_PATH" "$TEST_EXE_DIR/zrraw.dll"
            done
          fi
          
          # On macOS, the library is a .dylib
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            # Look for any dylib file (versioned or not)
            LIB_PATH=$(find ../../zig-out/lib -name "libzrraw*.dylib" | grep -E "(libzrraw\.dylib|libzrraw\.[0-9]+\.[0-9]+\.[0-9]+\.dylib)" | head -n 1)
            if [[ -z "$LIB_PATH" ]]; then
              echo "Error: Could not find libzrraw dylib in ../../zig-out/lib/"
              ls -la ../../zig-out/lib/
              exit 1
            fi
            # Find all test executables and copy the dylib to their directories
            find target/debug/deps -name "zrraw*" ! -name "*.d" | while read test_exe; do
              if [[ -f "$test_exe" ]]; then
                TEST_EXE_DIR=$(dirname "$test_exe")
                echo "Copying $LIB_PATH to $TEST_EXE_DIR/ as libzrraw.dylib"
                cp "$LIB_PATH" "$TEST_EXE_DIR/libzrraw.dylib"
              fi
            done
          fi
          
          # On Linux, the library is a .so
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            # Look for any so file (versioned or not)
            LIB_PATH=$(find ../../zig-out/lib -name "libzrraw*.so*" | grep -E "(libzrraw\.so|libzrraw\.so\.[0-9]+\.[0-9]+\.[0-9]+)" | head -n 1)
            if [[ -z "$LIB_PATH" ]]; then
              echo "Error: Could not find libzrraw so in ../../zig-out/lib/"
              ls -la ../../zig-out/lib/
              exit 1
            fi
            # Find all test executables and copy the so to their directories
            find target/debug/deps -name "zrraw*" ! -name "*.d" | while read test_exe; do
              if [[ -f "$test_exe" ]]; then
                TEST_EXE_DIR=$(dirname "$test_exe")
                echo "Copying $LIB_PATH to $TEST_EXE_DIR/ as libzrraw.so"
                cp "$LIB_PATH" "$TEST_EXE_DIR/libzrraw.so"
              fi
            done
          fi
          
          echo "Library found at: $LIB_PATH"
          echo "Copied library to test directories."

          echo "=== Running tests ==="
          # Now that the library is in the right place, run the tests.
          cargo test --workspace --features "zrraw-sys/compile-from-source" --verbose