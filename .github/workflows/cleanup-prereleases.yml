name: Cleanup Old Prereleases

# This workflow runs weekly to clean up old prerelease builds
# It keeps the latest 5 prereleases and all stable releases
on:
  schedule:
    # Run every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      keep_count:
        description: 'Number of prereleases to keep'
        required: false
        default: '5'
        type: string

jobs:
  cleanup-prereleases:
    name: Cleanup Old Prerelease Builds
    runs-on: ubuntu-latest

    steps:
      - name: Cleanup old prereleases
        uses: actions/github-script@v7
        with:
          script: |
            const keepCount = parseInt('${{ github.event.inputs.keep_count || 5 }}');
            
            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            // Filter prereleases and sort by creation date (newest first)
            const prereleases = releases.data
              .filter(release => release.prerelease)
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            console.log(`Found ${prereleases.length} prereleases`);
            console.log(`Keeping the latest ${keepCount} prereleases`);
            
            // Delete old prereleases (keep the latest N)
            const toDelete = prereleases.slice(keepCount);
            
            for (const release of toDelete) {
              console.log(`Deleting prerelease: ${release.tag_name} (${release.created_at})`);
              
              try {
                // Delete the release
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                // Delete the associated tag
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`
                });
                
                console.log(`✅ Deleted ${release.tag_name}`);
              } catch (error) {
                console.log(`❌ Failed to delete ${release.tag_name}: ${error.message}`);
              }
            }
            
            console.log(`Cleanup complete. Deleted ${toDelete.length} old prereleases.`);
